{"version":3,"file":"component---src-pages-gallery-tus-voluteer-src-components-home-character-card-tsx-1352949038b3b3c87855.js","mappings":"mMACA,GAAe,IAAAA,eAAc,CAAC,GCE9B,SAASC,GAAc,KAAEC,EAAI,SAAEC,IAC3B,IAAKD,EACD,MAAM,IAAIE,MAAM,6CAEpB,OAAQ,SAAKC,EAAYC,SAAUC,OAAOC,OAAO,CAAEC,MAAOP,GAAQ,CAAEC,SAAUA,IAClF,CACAF,EAAcS,UAAY,CACtBR,KAAM,uBAEV,QCZIS,EAAkC,SAAUC,EAAGC,GAC/C,IAAIC,EAAI,CAAC,EACT,IAAK,IAAIC,KAAKH,EAAOL,OAAOS,UAAUC,eAAeC,KAAKN,EAAGG,IAAMF,EAAEM,QAAQJ,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjCL,OAAOa,sBACtB,KAAIC,EAAI,EAAb,IAAgBN,EAAIR,OAAOa,sBAAsBR,GAAIS,EAAIN,EAAEO,OAAQD,IAC3DR,EAAEM,QAAQJ,EAAEM,IAAM,GAAKd,OAAOS,UAAUO,qBAAqBL,KAAKN,EAAGG,EAAEM,MACvEP,EAAEC,EAAEM,IAAMT,EAAEG,EAAEM,IAF4B,CAItD,OAAOP,CACX,EAKA,SAASU,EAAMC,GACX,IAAI,KAAEC,GAASD,EAAIE,EAAQhB,EAAOc,EAAI,CAAC,SACvC,MACMG,GADO,IAAAC,YAAWxB,GACPqB,GAIjB,OAHKE,GACDE,QAAQC,KAAK,SAASL,gCAElB,SAAK,MAAOnB,OAAOC,OAAO,CAAEwB,IAAKJ,EAAKK,IAAKP,EAAM,aAAcA,GAAQC,GACnF,CACAH,EAAMd,UAAY,CACdgB,KAAM,uBAEV,Q,mBCoCA,MAlDA,SAAuBC,GACrB,IAAI,EAACO,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,WAAS,GAEnC,OACEC,EAAAA,cAACC,EAAAA,EAAAA,IAAU,CACTC,UAAS,8HAAgIZ,EAAMa,MAC/IC,WAAY,CACVC,MAAO,MAETC,SAAU,CACRD,MAAO,MAETE,MAAO,KACLT,GAAWD,EAAO,EAEpBW,QAAS,CACPC,OAAQZ,EAAS,IAAM,KAEzBa,WAAY,CACVC,SAAU,IACVC,KAAM,YAGRZ,EAAAA,cAACC,EAAAA,EAAAA,IAAU,CACTC,UAAU,mCACVM,QAAS,CAAEK,QAAShB,EAAS,EAAI,GACjCa,WAAY,CAAEC,SAAU,KAExBX,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACpC,EAAa,CAACC,KAAMiD,GACnBd,EAAAA,cAACb,EAAK,CAACE,KAAMC,EAAMyB,KAAMC,MAAO,OAGpChB,EAAAA,cAAAA,MAAAA,CAAKE,UAAS,wBAA0BZ,EAAM2B,UAC3C3B,EAAM4B,QAGXlB,EAAAA,cAACC,EAAAA,EAAAA,IAAU,CACTC,UAAS,aACPL,EAAS,UAAY,YAAU,wBAEjCW,QAAS,CAAEK,QAAShB,EAAS,EAAI,GACjCa,WAAY,CAAEC,SAAU,KAEvBrB,EAAM6B,SAIf,C","sources":["webpack://portfolio/./node_modules/react-apple-emojis/dist/DataContext.js","webpack://portfolio/./node_modules/react-apple-emojis/dist/EmojiProvider.js","webpack://portfolio/./node_modules/react-apple-emojis/dist/Emoji.js","webpack://portfolio/./src/pages/gallery/TUS-Voluteer/src/components/Home/CharacterCard.tsx"],"sourcesContent":["import { createContext } from 'react';\nexport default createContext({});\n//# sourceMappingURL=DataContext.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport PropTypes from 'prop-types';\nimport DataContext from './DataContext';\nfunction EmojiProvider({ data, children }) {\n    if (!data) {\n        throw new Error('Please pass a data value to EmojiProvider');\n    }\n    return (_jsx(DataContext.Provider, Object.assign({ value: data }, { children: children })));\n}\nEmojiProvider.propTypes = {\n    data: PropTypes.object.isRequired,\n};\nexport default EmojiProvider;\n//# sourceMappingURL=EmojiProvider.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useContext } from 'react';\nimport propTypes from 'prop-types';\nimport DataContext from './DataContext';\nfunction Emoji(_a) {\n    var { name } = _a, props = __rest(_a, [\"name\"]);\n    const data = useContext(DataContext);\n    const url = data[name];\n    if (!url) {\n        console.warn(`Emoji ${name}'s URL could not be found.`);\n    }\n    return (_jsx(\"img\", Object.assign({ src: url, alt: name, \"aria-label\": name }, props)));\n}\nEmoji.propTypes = {\n    name: propTypes.string.isRequired,\n};\nexport default Emoji;\n//# sourceMappingURL=Emoji.js.map","import React, { useState } from \"react\";\nimport { Emoji, EmojiProvider } from \"react-apple-emojis\";\nimport emojiData from \"react-apple-emojis/src/data.json\";\nimport { motion } from \"framer-motion\";\n\ninterface CharacterCardData {\n  color: string;\n  title: string;\n  content: JSX.Element;\n  icon: string;\n  fontSize?: string;\n}\n\nfunction CharacterCard(props: CharacterCardData) {\n  let [tapped, setTapped] = useState(false);\n\n  return (\n    <motion.div\n      className={`flex flex-col select-none cursor-pointer gap-2 items-center justify-center rounded-[20px] shadow-round w-[350px] h-[200px] ${props.color}`}\n      whileHover={{\n        scale: 1.05,\n      }}\n      whileTap={{\n        scale: 1.02,\n      }}\n      onTap={() => {\n        setTapped(!tapped);\n      }}\n      animate={{\n        height: tapped ? 450 : 200,\n      }}\n      transition={{\n        duration: 0.15,\n        ease: \"easeOut\",\n      }}\n    >\n      <motion.div\n        className=\"flex flex-col gap-2 items-center\"\n        animate={{ opacity: tapped ? 0 : 1 }}\n        transition={{ duration: 0.1 }}\n      >\n        <div>\n          <EmojiProvider data={emojiData}>\n            <Emoji name={props.icon} width={45} />\n          </EmojiProvider>\n        </div>\n        <div className={`text-white font-bold ${props.fontSize}`}>\n          {props.title}\n        </div>\n      </motion.div>\n      <motion.div\n        className={`absolute ${\n          tapped ? \"visible\" : \"collapse\"\n        } text-base text-white`}\n        animate={{ opacity: tapped ? 1 : 0 }}\n        transition={{ duration: 0.1 }}\n      >\n        {props.content}\n      </motion.div>\n    </motion.div>\n  );\n}\n\nexport default CharacterCard;\n"],"names":["createContext","EmojiProvider","data","children","Error","DataContext","Provider","Object","assign","value","propTypes","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","Emoji","_a","name","props","url","useContext","console","warn","src","alt","tapped","setTapped","useState","React","motion","className","color","whileHover","scale","whileTap","onTap","animate","height","transition","duration","ease","opacity","emojiData","icon","width","fontSize","title","content"],"sourceRoot":""}