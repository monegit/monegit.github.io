{"version":3,"file":"component---src-pages-gallery-tus-voluteer-src-components-home-activity-tsx-e3632862e086d4be0d0f.js","mappings":"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","sources":["webpack://portfolio/./src/pages/gallery/TUS-Voluteer/src/components/Home/Activity.tsx","webpack://portfolio/./node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","webpack://portfolio/./node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["import React from \"react\";\nimport { AnimationControls, motion, useAnimation } from \"framer-motion\";\n\ninterface ActivityData {\n  title: string;\n  description: string[];\n  image: string;\n  activity: string[];\n  reverseView?: boolean;\n}\n\nconst Title = (props: { title: string; animate: AnimationControls }) => {\n  return (\n    <motion.div\n      className=\"text-3xl font-bold\"\n      initial={{ opacity: 0 }}\n      animate={props.animate}\n    >\n      {props.title}\n    </motion.div>\n  );\n};\n\nconst Description = (props: {\n  description: string[];\n  animate: AnimationControls;\n}) => {\n  return (\n    <motion.div\n      className=\"flex flex-col gap-1\"\n      initial={{ opacity: 0 }}\n      animate={props.animate}\n    >\n      {props.description?.map((data) => {\n        return <div>{data}</div>;\n      })}\n    </motion.div>\n  );\n};\n\nconst Detail = (props: { activity: string[]; animate: AnimationControls }) => {\n  return (\n    <motion.div\n      className=\"flex\"\n      initial={{ opacity: 0 }}\n      animate={props.animate}\n    >\n      <div className=\"flex w-[800px] flex-wrap gap-2\">\n        {props.activity?.map((data) => {\n          return (\n            <div className=\"flex p-2 bg-slate-300 text-slate-600 rounded-lg text-sm\">\n              # {data}\n            </div>\n          );\n        })}\n      </div>\n    </motion.div>\n  );\n};\n\nconst PrimaryImage = (props: { image: string; animate: AnimationControls }) => {\n  return (\n    <motion.img\n      animate={props.animate}\n      className=\"relative flex rounded-3xl shadow-roundXL object-cover\"\n      initial={{ opacity: 0, width: 0, height: 0 }}\n      src={props.image}\n      viewport={{ once: true, amount: 0, margin: \"0px 0px 100px 0px\" }}\n    />\n  );\n};\n\nfunction Activity(props: ActivityData) {\n  const titleAnimation = useAnimation();\n  const descriptionAnimation = useAnimation();\n  const detailAnimation = useAnimation();\n  const imageAnimation = useAnimation();\n\n  return (\n    <motion.div\n      className={`flex w-[1300px] items-center gap-10 ${\n        props.reverseView === true ? \"flex-row-reverse\" : \"\"\n      }`}\n      onViewportEnter={() => {\n        titleAnimation.start({ opacity: 1 });\n        descriptionAnimation.start({\n          opacity: 1,\n          transition: { delay: 0.3 },\n        });\n        detailAnimation.start({ opacity: 1, transition: { delay: 0.5 } });\n        imageAnimation.start({\n          width: 350,\n          height: 500,\n          opacity: 1,\n          transition: { duration: 0.5, ease: \"circOut\" },\n        });\n      }}\n    >\n      <PrimaryImage animate={imageAnimation} image={props.image} />\n      <div className={`flex flex-col gap-5`}>\n        <Title animate={titleAnimation} title={props.title} />\n        <div className=\"flex flex-col ml-8 gap-5\">\n          <Description\n            animate={descriptionAnimation}\n            description={props.description}\n          />\n          <Detail animate={detailAnimation} activity={props.activity} />\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\nexport default Activity;\n","import { invariant } from 'hey-listen';\nimport { stopAnimation, animateVisualElement } from '../../render/utils/animation.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    const pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                const animations = [];\n                subscribers.forEach((visualElement) => {\n                    animations.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride,\n                    }));\n                });\n                return Promise.all(animations);\n            }\n            else {\n                return new Promise((resolve) => {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve,\n                    });\n                });\n            }\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            pendingAnimations.forEach(({ animation, resolve }) => {\n                controls.start(...animation).then(resolve);\n            });\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.mjs';\nimport { useEffect } from 'react';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["Title","props","React","motion","className","initial","opacity","animate","title","Description","description","_props$description","map","data","Detail","activity","_props$activity","PrimaryImage","width","height","src","image","viewport","once","amount","margin","titleAnimation","useAnimation","descriptionAnimation","detailAnimation","imageAnimation","reverseView","onViewportEnter","start","transition","delay","duration","ease","animationControls","hasMounted","pendingAnimations","subscribers","Set","controls","subscribe","visualElement","add","delete","definition","transitionOverride","animations","forEach","push","Promise","all","resolve","animation","set","stop","mount","then","useAnimationControls","useEffect"],"sourceRoot":""}